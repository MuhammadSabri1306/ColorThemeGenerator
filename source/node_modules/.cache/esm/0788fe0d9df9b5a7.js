_9df‍.x([["default",()=>_9df‍.o]]);const valueMarker = "{value}";

const setupConfig = config => {
	const maxItems = config.maxItems ? config.maxItems : 6;
	const highlight = config.highlight ? config.highlight : false;
	const marker = config.marker ? config.marker : "'" + valueMarker + "'";
	const showScore = config.showScore ? config.showScore : false;

	return { maxItems, highlight, marker, showScore };
};

const createRegeExp = keyword => {
	const keyRegx = [];
	for(let i=0; i<keyword.length; i++){
		const keyRegxItem = (i < keyword.length - 1) ? keyword[i] + keyword.slice(1).split("").map(q => q + "*").join("") : keyword[i];
		keyRegx.push(keyRegxItem);
	}

	const regx = keyRegx.map(item => "(" + item + ")").join("|");
	return new RegExp(regx, "g");
};

const searchAlgorithm = (keyword, model, config = {}) => {
	let { maxItems, highlight, marker, showScore } = setupConfig(config);

	// first char filter
	model = model.filter(item => item[0] == keyword[0]);

	//scoring
	model = model.map(item => {
		const matchKeys = item.match(createRegeExp(keyword));

		const score = !matchKeys ? 0 : matchKeys.reduce((sum, mItem) => sum + Math.pow(mItem.length, mItem.length), 0);
		if(!highlight)
			return { value: item, score };

		// highlighting
		matchKeys
			.map(mItem => {
				const key = mItem;
				const replacer = mItem.replace(mItem, marker.replace(valueMarker, mItem));
				return { key, replacer };
			})
			.forEach(mItem => item = item.replace(mItem.key, mItem.replacer));

		return { value: item, score };
	});

	// order value based on smaller score and limit as maxItems
	model = model.sort((a, b) => b.score - a.score).slice(0, maxItems);
	return !showScore ? model.map(item => item.value) : model;
};

_9df‍.d(searchAlgorithm);
